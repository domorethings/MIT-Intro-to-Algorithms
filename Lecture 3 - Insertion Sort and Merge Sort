INSERTION SORT AND MERGE SORT SECTION
Insertion Sort: A sequence of numbers (a1, a2, ... , an)
A permutation reordering... (a'(sub1), a'(sub2), a'(sub3), a'(subn) such that a'1 <= a'2 <= a'n.

The numbers we wish to sort are the keys. Conceptually, a sequence, but input comes in form of an array.



INSERTION SORT: Efficient in sorting small number of elements.
  c(sub1)n^2 to sort n items, where c1 is a constant that does NOT DEPEND on n.
  
REGARDING CONSTANT FACTORS:
- Typically insertion sort has a smaller constant factor, so that c(sub1) < c(sub2).
- What about them constant factors? CONSTANT FACTORS have LESS IMPACT than THE DEPENDENCE ON THE INPUT SIZE N IMPACT ON RUN SPEED.

MERGE SORT: c(sub2)n(lgn) to sort n items. lgn means log(sub2)(n).
  c(sub2) is another constant that does not depend on n.

conclusion: Merge sort is ALWAYS FASTER NO MATTER HOW SMALL c(sub1) is than c(sub2), there's always a crossover point where merge sort 
will become FASTER than insertion sort. 
