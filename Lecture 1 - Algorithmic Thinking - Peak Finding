Review of Lecture 1 (Peak Finder, Insertion Sort, Merge Sort)
PEAK FINDER
One-Dimensional Case: 
[[a][b][c][d][e][f][g][h][i]]
  1  2  3  4  5  6  7  8  9

CONDITIONS:
a - i are numbers
Example #1: Position 2 is the peak iff b >= a and b >= c.
Example #2: Position 3 is the peak iff c >= b and c >= d. 
"Look to your left, then look to your right, see if you're equal"

FIRST WAY -- STRAIGHTFORWARD ALGORITHM
Start from the left [[1][2][n/2][n-1][n]]
                           /\
                          /  \  
                           This might be the peak. Look at n/2 element
                           Worst complexity here is Θn: Reasoning? "We are looking at all N elements"
something that a constant times n (Θn)
One way to make this faster? DIVIDE-AND-CONQUER!

Look at all n/2 positions...
  if a[n/2] < a[(n/2)-1] then look at the left hand 1...(n/2)-1 for a peak
  else if a[n/2] < a[(n/2)+1] then (n/2)+1 n for a peak
  else (n/2) position is a peak.
    (^Here, we argue that the algorithm is correct)
                           
 T(n) = T(n/2) + Θ(1) 
      Base Case: T(1) = Θ(1)
      T(n) = Θ(1) + ... Θ(1) = Θ(log(sub2)(n)))
             \_____________/
             This section is: log(sub2)n times 
             
TWO-DIMENSIONAL VERSION
    [ ][c][ ][ ]
    [b][a][d][ ]  n rows
    [ ][e][ ][ ] 
      m columns 
      
  ATTEMPT #1: GREEDY ASCENT ALGORITHM
  a is a 2-D peak iff a >= b, a >= c, a >= d, a >= e.
  Time Complexity: Θ(nm) complexity
    Θ(n^2) if m = n 
    
 ATTEMPT #2
 Pick middle column j = m/2 
 Find global max on column j at (i, j) 
 Compare (i, j-i), (i,j), (i + j+1) 
 Pick left columns if (i, j-1) > (i, j)
  (Similarly for the right)
  
 If (i, j) >= (i, j-1), (i + j) ===> (i, j) is a 2-D Peak
 - Solves the problem with half the number of columns
 - When you have a single column, find the global max <--- DONE!
 
 T(n, m) = T(n, m/2) + Θ(n) + Θ(n)      (Θ(n) is the MAX)
 T(n, 1) = Θ(n)
 T(n, m) = Θ(n) + ... + Θ(n) 
    \/
     Θ(nlog(sub2)m)
 
    
